Good afternoon, my name is Daniel Tomov and I will present my program for searching attractions. From the beginning, I knew I had to have some sort of database or list that would store the attractions while the program is running. I also knew the backend of the program would be written in Java or Python, the two programming languages I know. I have had experience making a website in Python and making a Graphical Interface in Java, but not anything like this.

I tried to make it with Python Flask because I was already familiar with Python, HTML, and CSS. After I made the main page, I started looking into ways to store data. Again, I have experience with reading and writing data to and from CSV files, but I didnâ€™t do it because it was not efficient. Eventually, I discovered the Replit DB package which integrates with Replit. Replit is a website that allows programmers to run code inside a browser. At first, this solution seemed promising, but after adding only 20 locations, the loading of the website was slow. So slow that when I showed it to friends, they were clicking the submit button multiple times, which led the program to break. That is when I realized that the program will perform even slower when there are twice as many attractions. 

To solve this problem, I moved to objects and classes. These work natively with Python and do not require outside packages to function. The only problem is that I have not used objects and classes in Python, but I have in Java. So it was fairly simple to implement them into my code. And when I did so, the program was running surprisingly fast.

The next obstacle was to figure out how to display all of the attractions on the HTML website. Luckily, there is a way to do it with Flask, a web application framework. All I needed to do was send the populated list with attractions to the website, do some code that Flask understands in the HTML file, and there are fifty attractions on the page.

Lastly, I wanted to add a dynamic way to update the tags and provinces that the user can filter attractions by. That was done by going through each attraction, extracting the province and tags, and adding them to a list that is then sent to the HTML and displayed in the sidebar.



When the program loads, it extracts the tags and provinces from the attractions and puts them into two lists. Each attraction has different attributes which include an address, a website, tags, an image, and a name. There are also two other lists that are populated with all the information from the attractions. When a user accesses the website for the first time, they are given one of the lists with all the attractions. After the user adjusts the filters based on their wants, the backend populates the second list and then removes the attractions that do not fit the user-specified filter from the second list. The checklist is also populated at this time, with the indexes of the checked attractions being the same as the provinces and filters.
